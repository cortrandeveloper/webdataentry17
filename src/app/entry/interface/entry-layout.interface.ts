// Generated by https://quicktype.io

import { ControlType } from "../enums/control-type.enum";
import { DataSourceType } from "../enums/datasource-type.enum";
import { ValidationType } from "../enums/validation-type.enum";
import { OptionItem } from "./option-item.interface";

export interface RootLayout {
  ImageFromTiff:                 boolean;
  RemoveReadOnlyFieldException:  string;
  RemoveReadOnlyOnProcess:       string;
  OverrideOnProcess:             string;
  SetOverrideStatus:             string;
  UnFocusBackgroundColor:        string;
  FocusBackgroundColor:          string;
  AllowFlag:                     boolean;
  AllowInterrupt:                boolean;
  AutomaticClose:                boolean;
  AutoSaveInterval:              number;
  Behavior:                      Behavior[];
  DisableEmbedKeyboard:          boolean;
  DisableFindOnStatus:           boolean;
  DocumentClosedByFlag:          boolean;
  FlagOptions:                   string;
  FlagOptionsByDocument:         string;
  ImageFromDirectory:            boolean;
  RecycleForm:                   boolean;
  InternalFlagOptions:           InternalFlagOption[];
  InternalFlagOptionsByDocument: InternalFlagOption[];
  Name:                          string;
  PageLayout:                    PageLayout[];
  DeletedPageLayout:             any[];
  Type:                          string;
  GetAllImageList:               boolean;
}

export interface Behavior {
  IncludeBlankFindOnStatus:         boolean;
  BlindFindOnStatus:                boolean;
  DisplayInputFlagMessage:          boolean;
  Enable:                           boolean;
  FindOnStatus:                     string;
  KeyDataMode:                      string;
  KeyType:                          KeyType;
  LoadFromInputData:                boolean;
  Name:                             string;
  DefaultStatusWhenInputLoaded:     string;
  DefaultStatusWhenInterruptLoaded: string;
}

export interface KeyType {
  IfNotMatch: string;
  Mode:       string;
}

export interface InternalFlagOption {
  Description: string;
  Trigger:     string;
  Value:       Value;
}

export enum Value {
  Empty = "",
  Illegible = "illegible",
  ReKey = "ReKey",
  Reject = "Reject",
  Sethold = "SETHOLD",
}

export interface PageLayout {
  AnnonItemLayout:    any[];
  Behavior:           any[];
  ControlsPercent:    number;
  GroupLayout:        GroupLayout[];
  DeletedGroupLayout: any[];
  ImageIndex:         number;
  ImagePercent:       number;
  ImageZoom:          number;
  Index:              number;
  IsNewElement:       boolean;
  Name:               string;
  Orientation:        number;
  Position:           number;
  Repeat:             number;
  Type:               string;
}

export interface GroupLayout {
  RepeatStaticRender: boolean;
  AnnonItemLayout:    AnnonItemLayout[];
  Behavior:           any[];
  GroupAligment:      number;
  ImageIndex:         number;
  ImageZoom:          number;
  Index:              number;
  IsNewElement:       boolean;
  IsNewEntry:         boolean;
  ItemLayout:         ItemLayout[];
  Name:               string;
  Repeat:             number;
  Type:               string;
  Zone:               Coord;
}

export interface AnnonItemLayout {
  AutoSize:       boolean;
  BoderThickness: Coord;
  Dimension:      Point;
  Font:           Font;
  FontSize:       number;
  Model:          string;
  Name:           string;
  Position:       Point;
  Text:           string;
  TextAlignment:  number;
  ZIndex:         number;
}

export interface Coord {
  X: number;
  Y: number;
  W: number;
  H: number;
}

export interface Point {
  X: number;
  Y: number;
}

export enum Font {
  Arial = "Arial",
  CourierNew = "Courier New",
}

export interface ItemLayout {
  FieldLength?:                     number;
  Model:                            number;
  Name:                             string;
  SubItemLayout:                    any[];
  Type:                             string;
  ValidadationType:                 number;
  ValidationMessage?:               string;
  ValidChars?:                      string;
  ValidException?:                  string;
  ValidExpression?:                 string;
  Visibility:                       boolean;
  IsVisible?:                       boolean;
  DataSource:                       string;
  DataSourceType:                   number;
  HasNewValue:                      boolean;
  DefaultStatusWhenInputLoaded:     string;
  DefaultStatusWhenInterruptLoaded: string;
  AllowFlag:                        boolean;
  AutoSkip:                         boolean;
  Behavior:                         any[];
  ControlState:                     number;
  Dimension:                        Point;
  HasFlag:                          boolean;
  ImageIndex:                       number;
  ImageZoom:                        number;
  InputCharSet:                     string;
  KeyGross:                         number;
  KeyNet:                           number;
  Link:                             string;
  LockFieldOnStatus:                string;
  LookupFields:                     string;
  LookupFielsClearNoMatch:          boolean;
  LookupQuery:                      string;
  MessageInfo:                      string;
  MessageRule:                      string;
  OutputCharSet:                    string;
  PageIndex:                        number;
  Position:                         Point;
  ReadOnly:                         boolean;
  ResetPositionWhenChangePage:      boolean;
  SkipFieldOnStatus:                string;
  TabStop:                          boolean;
  ZIndex:                           number;
  ZoneHighlight?:                   Coord;
  Guid?:                            string;
  ContentOrientation?:              number;
  MultiOption?:                     boolean;
  Options?:                         InternalFlagOption[];
  Required?:                        boolean;
  AutoRetriever?:                   boolean;
  Mode?:                            number;
  Zone?:                            Coord;
  OptionItems?:                     OptionItem[];
}
