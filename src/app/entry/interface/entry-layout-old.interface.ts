// Generated by https://quicktype.io

import { ControlType } from "../enums/control-type.enum";
import { DataSourceType } from "../enums/datasource-type.enum";
import { ValidationType } from "../enums/validation-type.enum";
import { OptionItem } from "./option-item.interface";

export interface RootLayout {
  IsEditingName: boolean;
  Name: string;
  Type: string;
  RecycleForm: boolean;
  GetAllImageList: boolean;
  RemoveReadOnlyFieldException: string;
  RemoveReadOnlyOnProcess: string;
  OverrideOnProcess: string;
  SetOverrideStatus: string;
  ReadOnlyBackgroundColor: string;
  UnFocusBackgroundColor: string;
  FocusBackgroundColor: string;
  BackgroundColor: string;
  AllowFlag: boolean;
  AllowInterrupt: boolean;
  AutomaticClose: boolean;
  AutoSaveInterval: number;
  DisableEmbedKeyboard: boolean;
  DisableFindOnStatus: boolean;
  BeforeEnd: string;
  BeforeInterrupt: string;
  BeforeSave: string;
  Behavior: Behavior[];
  BehaviorOptions: string;
  FlagOptions: string;
  FlagOptionsByDocument: string;
  ImageFromDirectory: boolean;
  ImageFromTiff: boolean;
  InternalBehaviorOptions: InternalBehaviorOption[];
  InternalFlagOptions: InternalBehaviorOption[];
  InternalFlagOptionsByDocument: InternalBehaviorOption[];
  PageLayout: PageLayout[];
  Script: string;
}

export interface Behavior {
  Enable: boolean;
  FindOnStatus: string;
  KeyDataMode: string;
  KeyType: KeyType;
  LoadFromInputData: boolean;
  IncludeBlankFindOnStatus: boolean;
  BlindFindOnStatus: boolean;
  DisplayInputFlagMessage: boolean;
  Name: string;
  DefaultStatusWhenInputLoaded: string;
  DefaultStatusWhenInterruptLoaded: string;
  Override: any[];
}

export interface KeyType {
  IfNotMatch: string;
  Mode: string;
}

export interface InternalBehaviorOption {
  _description: string;
  _value: string;
  _trigger: string;
  Description: string;
  Trigger: string;
  Value: string;
}

export interface PageLayout {
  AnnonItemLayout: any[];
  Behavior: Behavior[];
  ControlsPercent: number;
  GroupLayout: GroupLayout[];
  ImageIndex: number;
  ImagePercent: number;
  ImageZoom: number;
  IsEditingName: boolean;
  Name: string;
  Orientation: number;
  Position: number;
  Repeat: number;
  Type: string;
}

export interface GroupLayout {
  RepeatStaticRender: boolean;
  BackgroundColor: string;
  AnnonItemLayout: AnnonItemLayout[];
  Behavior: Behavior[];
  GroupAligment: number;
  ImageIndex: number;
  ImageZoom: number;
  IsEditingName: boolean;
  ItemLayout: ItemLayout[];
  Name: string;
  Repeat: number;
  Type: string;
  Zone: string;
}

export interface AnnonItemLayout {
  AutoSize: boolean;
  BackgroundColor: string;
  BorderBrushColor: string;
  BorderThickness: string;
  Dimension: string;
  DimensionWidth?: number;
  DimensionHeight?: number;
  Font: Font;
  FontSize: number;
  ForegroundColor: string;
  Model: string;
  Name: string;
  Position: string;
  PositionX?: number;
  PositionY?: number;
  Text: string;
  TextAlignment: number;
  ZIndex: number;
}

export enum Font {
  Arial = "Arial",
  CourierNew = "Courier New",
}

export interface ItemLayout {
  AllowFlag: boolean;
  AutoRetriever?: boolean;
  AutoSkip: boolean;
  Behavior: Behavior[];
  ContentOrientation?: number;
  DataSource?: string;
  DataSourceType?: DataSourceType;
  DefaultStatusWhenInputLoaded: string;
  DefaultStatusWhenInterruptLoaded: string;
  Dimension: string;
  DimensionWidth?: number;
  DimensionHeight?: number;
  FieldLength?: number;
  IconPath: IconPath;
  ImageIndex: number;
  ImageZoom: number;
  InputCharSet: string;
  IsEditingName: boolean;
  IsVisible?: boolean;
  Link: string;
  LockFieldOnStatus: string;
  LookupFields: string;
  LookupFielsClearNoMatch: boolean;
  LookupQuery: string;
  MessageInfo: string;
  MessageRule: string;
  Mode?: number;
  Model: ControlType;
  MultiOption?: boolean;
  Name: string;
  OnFocus: string;
  OptionItems?: OptionItem[];
  OutputCharSet: string;
  Position: string;
  PositionX?: number;
  PositionY?: number;
  ReadOnly: boolean;
  Required?: boolean;
  ResetPositionWhenChangePage: boolean;
  Script: string;
  SelectedIndex?: number;
  SkipFieldOnStatus: string;
  SubItemLayout: any[];
  TabStop: boolean;
  Type: Type;
  ValidadationType: ValidationType;
  ValidationMessage: null | string;
  ValidChars: null | string;
  ValidException?: string;
  ValidExpression: null | string;
  Visibility: boolean;
  ZIndex: number;
  Zone: string;
  ZoneRect?: Rect;
  ZoneHighlight: string;
  ZoneHighlightRect?: Rect;
}

export enum IconPath {
  ImagesListIconPNG = "Images/listIcon.png",
  ImagesOptionIconPNG = "Images/optionIcon.png",
  ImagesTextboxIconPNG = "Images/textboxIcon.png",
}

export enum Type {
  Element = "Element",
}

export interface Rect {
  x: number;
  y: number;
  w: number;
  h: number;
}
